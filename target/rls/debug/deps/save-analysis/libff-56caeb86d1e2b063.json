{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1","program":"C:\\Users\\dragon\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","ff","--edition=2018","C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=56caeb86d1e2b063","-C","extra-filename=-56caeb86d1e2b063","--out-dir","d:\\job\\cosmwasm\\cw721-main\\target\\rls\\debug\\deps","-L","dependency=d:\\job\\cosmwasm\\cw721-main\\target\\rls\\debug\\deps","--extern","rand_core=d:\\job\\cosmwasm\\cw721-main\\target\\rls\\debug\\deps\\librand_core-f9390bec2cc01750.rmeta","--extern","subtle=d:\\job\\cosmwasm\\cw721-main\\target\\rls\\debug\\deps\\libsubtle-5f3cc568250042a5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\dragon\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\job\\cosmwasm\\cw721-main\\target\\rls\\debug\\deps\\libff-56caeb86d1e2b063.rmeta"},"prelude":{"crate_id":{"name":"ff","disambiguator":[7056603285244483805,0]},"crate_root":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src","external_crates":[{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1631835697898691535,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9301228628034177852,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[2093790580695599362,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":4,"id":{"name":"subtle","disambiguator":[17712567239025804401,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":5,"id":{"name":"std","disambiguator":[7449352764569583903,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":6,"id":{"name":"alloc","disambiguator":[6737091961566752624,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":7,"id":{"name":"libc","disambiguator":[5404310561352066988,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":8,"id":{"name":"unwind","disambiguator":[1962508984173027375,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":9,"id":{"name":"cfg_if","disambiguator":[6035099278034299636,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":10,"id":{"name":"hashbrown","disambiguator":[2965237822319993894,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18202861773354635365,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[5256087510298979761,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":13,"id":{"name":"std_detect","disambiguator":[9054181207765082768,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[15345473809858678681,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","num":15,"id":{"name":"rand_core","disambiguator":[14614128058275922645,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","num":16,"id":{"name":"getrandom","disambiguator":[8101914923397131773,0]}},{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[8192637230878500941,0]}}],"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":0,"byte_end":8003,"line_start":1,"line_end":267,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":299,"byte_end":300,"line_start":13,"line_end":13,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6949,"byte_end":6950,"line_start":232,"line_end":232,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":0,"byte_end":8003,"line_start":1,"line_end":267,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":75},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" This crate provides traits for working with finite fields.\n","sig":null,"attributes":[{"value":"/ This crate provides traits for working with finite fields.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":118,"byte_end":128,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"deny(broken_intra_doc_links)","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":168,"byte_end":200,"line_start":6,"line_end":6,"column_start":1,"column_end":33}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":201,"byte_end":224,"line_start":7,"line_end":7,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":9831,"byte_end":9844,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"BatchInverter","qualname":"::batch::BatchInverter","value":"BatchInverter {  }","parent":null,"children":[],"decl_id":null,"docs":" A non-allocating batch inverter.\n","sig":null,"attributes":[{"value":"/ A non-allocating batch inverter.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":9783,"byte_end":9819,"line_start":57,"line_end":57,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":10280,"byte_end":10308,"line_start":71,"line_end":71,"column_start":12,"column_end":40},"name":"invert_with_external_scratch","qualname":"<BatchInverter>::invert_with_external_scratch","value":"pub fn invert_with_external_scratch<F>(&mut [F], &mut [F]) -> F where\nF: Field + ConstantTimeEq","parent":null,"children":[],"decl_id":null,"docs":" Inverts each field element in `elements` (when nonzero). Zero-valued elements are\n left as zero.","sig":null,"attributes":[{"value":"/ Inverts each field element in `elements` (when nonzero). Zero-valued elements are","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":9874,"byte_end":9959,"line_start":61,"line_end":61,"column_start":5,"column_end":90}},{"value":"/ left as zero.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":9964,"byte_end":9981,"line_start":62,"line_end":62,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":9986,"byte_end":9989,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ - `scratch_space` is a slice of field elements that can be freely overwritten.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":9994,"byte_end":10076,"line_start":64,"line_end":64,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":10081,"byte_end":10084,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Returns the inverse of the product of all nonzero field elements.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":10089,"byte_end":10158,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":10163,"byte_end":10166,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":10171,"byte_end":10183,"line_start":68,"line_end":68,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":10188,"byte_end":10191,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This function will panic if `elements.len() != scratch_space.len()`.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":10196,"byte_end":10268,"line_start":70,"line_end":70,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":11466,"byte_end":11494,"line_start":102,"line_end":102,"column_start":12,"column_end":40},"name":"invert_with_internal_scratch","qualname":"<BatchInverter>::invert_with_internal_scratch","value":"pub fn invert_with_internal_scratch<F, T, TE, TS>(&mut [T], TE, TS) -> F where\nF: Field + ConstantTimeEq, TE: Fn(&mut T) -> &mut F, TS: Fn(&mut T) -> &mut F","parent":null,"children":[],"decl_id":null,"docs":" Inverts each field element in `items` (when nonzero). Zero-valued elements are\n left as zero.","sig":null,"attributes":[{"value":"/ Inverts each field element in `items` (when nonzero). Zero-valued elements are","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":11085,"byte_end":11167,"line_start":95,"line_end":95,"column_start":5,"column_end":87}},{"value":"/ left as zero.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":11172,"byte_end":11189,"line_start":96,"line_end":96,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":11194,"byte_end":11197,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ - `element` is a function that extracts the element to be inverted from `items`.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":11202,"byte_end":11286,"line_start":98,"line_end":98,"column_start":5,"column_end":89}},{"value":"/ - `scratch_space` is a function that extracts the scratch space from `items`.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":11291,"byte_end":11372,"line_start":99,"line_end":99,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":11377,"byte_end":11380,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Returns the inverse of the product of all nonzero field elements.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":11385,"byte_end":11454,"line_start":101,"line_end":101,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":969,"byte_end":974,"line_start":36,"line_end":36,"column_start":11,"column_end":16},"name":"Field","qualname":"::Field","value":"Field: Sized + Eq + Copy + Clone + Default + Send + Sync + fmt::Debug + 'static +\nConditionallySelectable + Add<Output = Self> + Sub<Output = Self> + Mul<Output\n= Self> + Neg<Output = Self> + for<'a> Add<&'a Self, Output = Self> +\nfor<'a> Mul<&'a Self, Output = Self> + for<'a> Sub<&'a Self, Output = Self> +\nMulAssign + AddAssign + SubAssign + for<'a> MulAssign<&'a Self> +\nfor<'a> AddAssign<&'a Self> + for<'a> SubAssign<&'a Self>","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"decl_id":null,"docs":" This trait represents an element of a field.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a field.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":910,"byte_end":958,"line_start":35,"line_end":35,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1584,"byte_end":1590,"line_start":62,"line_end":62,"column_start":8,"column_end":14},"name":"random","qualname":"::Field::random","value":"pub fn random<impl RngCore: RngCore>(impl RngCore) -> Self","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Returns an element chosen uniformly at random using a user-provided RNG.\n","sig":null,"attributes":[{"value":"/ Returns an element chosen uniformly at random using a user-provided RNG.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1500,"byte_end":1576,"line_start":61,"line_end":61,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1697,"byte_end":1701,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"zero","qualname":"::Field::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Returns the zero element of the field, the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns the zero element of the field, the additive identity.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1624,"byte_end":1689,"line_start":64,"line_end":64,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1796,"byte_end":1799,"line_start":68,"line_end":68,"column_start":8,"column_end":11},"name":"one","qualname":"::Field::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Returns the one element of the field, the multiplicative identity.\n","sig":null,"attributes":[{"value":"/ Returns the one element of the field, the multiplicative identity.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1718,"byte_end":1788,"line_start":67,"line_end":67,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1866,"byte_end":1873,"line_start":71,"line_end":71,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::Field::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Returns true iff this element is zero.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is zero.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1816,"byte_end":1858,"line_start":70,"line_end":70,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1944,"byte_end":1950,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"name":"square","qualname":"::Field::square","value":"pub fn square(&Self) -> Self","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Squares this element.\n","sig":null,"attributes":[{"value":"/ Squares this element.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1895,"byte_end":1920,"line_start":73,"line_end":73,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1925,"byte_end":1936,"line_start":74,"line_end":74,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2019,"byte_end":2023,"line_start":79,"line_end":79,"column_start":8,"column_end":12},"name":"cube","qualname":"::Field::cube","value":"pub fn cube(&Self) -> Self","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Cubes this element.\n","sig":null,"attributes":[{"value":"/ Cubes this element.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1972,"byte_end":1995,"line_start":77,"line_end":77,"column_start":5,"column_end":28}},{"value":"must_use","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2000,"byte_end":2011,"line_start":78,"line_end":78,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2130,"byte_end":2136,"line_start":85,"line_end":85,"column_start":8,"column_end":14},"name":"double","qualname":"::Field::double","value":"pub fn double(&Self) -> Self","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Doubles this element.\n","sig":null,"attributes":[{"value":"/ Doubles this element.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2081,"byte_end":2106,"line_start":83,"line_end":83,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2111,"byte_end":2122,"line_start":84,"line_end":84,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2262,"byte_end":2268,"line_start":89,"line_end":89,"column_start":8,"column_end":14},"name":"invert","qualname":"::Field::invert","value":"pub fn invert(&Self) -> CtOption<Self>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Computes the multiplicative inverse of this element,\n failing if the element is zero.\n","sig":null,"attributes":[{"value":"/ Computes the multiplicative inverse of this element,","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2158,"byte_end":2214,"line_start":87,"line_end":87,"column_start":5,"column_end":61}},{"value":"/ failing if the element is zero.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2219,"byte_end":2254,"line_start":88,"line_end":88,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2393,"byte_end":2397,"line_start":93,"line_end":93,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::Field::sqrt","value":"pub fn sqrt(&Self) -> CtOption<Self>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Returns the square root of the field element, if it is\n quadratic residue.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the field element, if it is","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2300,"byte_end":2358,"line_start":91,"line_end":91,"column_start":5,"column_end":63}},{"value":"/ quadratic residue.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2363,"byte_end":2385,"line_start":92,"line_end":92,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2695,"byte_end":2706,"line_start":100,"line_end":100,"column_start":8,"column_end":19},"name":"pow_vartime","qualname":"::Field::pow_vartime","value":"pub fn pow_vartime<S: AsRef<[u64]>>(&Self, S) -> Self","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Exponentiates `self` by `exp`, where `exp` is a little-endian order\n integer exponent.","sig":null,"attributes":[{"value":"/ Exponentiates `self` by `exp`, where `exp` is a little-endian order","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2429,"byte_end":2500,"line_start":95,"line_end":95,"column_start":5,"column_end":76}},{"value":"/ integer exponent.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2505,"byte_end":2526,"line_start":96,"line_end":96,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2531,"byte_end":2534,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ **This operation is variable time with respect to the exponent.** If the","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2539,"byte_end":2615,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ exponent is fixed, this operation is effectively constant time.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":2620,"byte_end":2687,"line_start":99,"line_end":99,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3110,"byte_end":3120,"line_start":117,"line_end":117,"column_start":11,"column_end":21},"name":"PrimeField","qualname":"::PrimeField","value":"PrimeField: Field + From<u64>","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":" This represents an element of a prime field.\n","sig":null,"attributes":[{"value":"/ This represents an element of a prime field.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3051,"byte_end":3099,"line_start":116,"line_end":116,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3248,"byte_end":3252,"line_start":120,"line_end":120,"column_start":10,"column_end":14},"name":"Repr","qualname":"::PrimeField::Repr","value":"type Repr: Default + AsRef<[u8]> + AsMut<[u8]>;","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" The prime field can be converted back and forth into this binary\n representation.\n","sig":null,"attributes":[{"value":"/ The prime field can be converted back and forth into this binary","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3146,"byte_end":3214,"line_start":118,"line_end":118,"column_start":5,"column_end":73}},{"value":"/ representation.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3219,"byte_end":3238,"line_start":119,"line_end":119,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3445,"byte_end":3453,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"from_str","qualname":"::PrimeField::from_str","value":"pub fn from_str(&str) -> Option<Self>","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" Interpret a string of numbers as a (congruent) prime field element.\n Does not accept unnecessary leading zeroes or a blank string.\n","sig":null,"attributes":[{"value":"/ Interpret a string of numbers as a (congruent) prime field element.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3296,"byte_end":3367,"line_start":122,"line_end":122,"column_start":5,"column_end":76}},{"value":"/ Does not accept unnecessary leading zeroes or a blank string.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3372,"byte_end":3437,"line_start":123,"line_end":123,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4623,"byte_end":4632,"line_start":168,"line_end":168,"column_start":8,"column_end":17},"name":"from_repr","qualname":"::PrimeField::from_repr","value":"pub fn from_repr(Self::Repr) -> Option<Self>","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" Attempts to convert a byte representation of a field element into an element of\n this prime field, failing if the input is not canonical (is not smaller than the\n field's modulus).","sig":null,"attributes":[{"value":"/ Attempts to convert a byte representation of a field element into an element of","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4280,"byte_end":4363,"line_start":162,"line_end":162,"column_start":5,"column_end":88}},{"value":"/ this prime field, failing if the input is not canonical (is not smaller than the","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4368,"byte_end":4452,"line_start":163,"line_end":163,"column_start":5,"column_end":89}},{"value":"/ field's modulus).","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4457,"byte_end":4478,"line_start":164,"line_end":164,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4483,"byte_end":4486,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The byte representation is interpreted with the same endianness as elements","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4491,"byte_end":4570,"line_start":166,"line_end":166,"column_start":5,"column_end":84}},{"value":"/ returned by [`PrimeField::to_repr`].","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4575,"byte_end":4615,"line_start":167,"line_end":167,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4941,"byte_end":4948,"line_start":175,"line_end":175,"column_start":8,"column_end":15},"name":"to_repr","qualname":"::PrimeField::to_repr","value":"pub fn to_repr(&Self) -> Self::Repr","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" Converts an element of the prime field into the standard byte representation for\n this field.","sig":null,"attributes":[{"value":"/ Converts an element of the prime field into the standard byte representation for","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4670,"byte_end":4754,"line_start":170,"line_end":170,"column_start":5,"column_end":89}},{"value":"/ this field.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4759,"byte_end":4774,"line_start":171,"line_end":171,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4779,"byte_end":4782,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The endianness of the byte representation is implementation-specific. Generic","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4787,"byte_end":4868,"line_start":173,"line_end":173,"column_start":5,"column_end":86}},{"value":"/ encodings of field elements should be treated as opaque.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4873,"byte_end":4933,"line_start":174,"line_end":174,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5025,"byte_end":5031,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"is_odd","qualname":"::PrimeField::is_odd","value":"pub fn is_odd(&Self) -> bool","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" Returns true iff this element is odd.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is odd.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":4976,"byte_end":5017,"line_start":177,"line_end":177,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5125,"byte_end":5132,"line_start":182,"line_end":182,"column_start":8,"column_end":15},"name":"is_even","qualname":"::PrimeField::is_even","value":"pub fn is_even(&Self) -> bool","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" Returns true iff this element is even.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is even.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5053,"byte_end":5095,"line_start":180,"line_end":180,"column_start":5,"column_end":47}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5100,"byte_end":5117,"line_start":181,"line_end":181,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5262,"byte_end":5270,"line_start":187,"line_end":187,"column_start":11,"column_end":19},"name":"NUM_BITS","qualname":"::PrimeField::NUM_BITS","value":"u32","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" How many bits are needed to represent an element of this field.\n","sig":null,"attributes":[{"value":"/ How many bits are needed to represent an element of this field.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5184,"byte_end":5251,"line_start":186,"line_end":186,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5424,"byte_end":5432,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"CAPACITY","qualname":"::PrimeField::CAPACITY","value":"u32","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" How many bits of information can be reliably stored in the field element.","sig":null,"attributes":[{"value":"/ How many bits of information can be reliably stored in the field element.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5282,"byte_end":5359,"line_start":189,"line_end":189,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5364,"byte_end":5367,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This is usually `Self::NUM_BITS - 1`.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5372,"byte_end":5413,"line_start":191,"line_end":191,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5856,"byte_end":5880,"line_start":203,"line_end":203,"column_start":8,"column_end":32},"name":"multiplicative_generator","qualname":"::PrimeField::multiplicative_generator","value":"pub fn multiplicative_generator() -> Self","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" Returns a fixed multiplicative generator of `modulus - 1` order. This element must\n also be a quadratic nonresidue.","sig":null,"attributes":[{"value":"/ Returns a fixed multiplicative generator of `modulus - 1` order. This element must","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5444,"byte_end":5530,"line_start":194,"line_end":194,"column_start":5,"column_end":91}},{"value":"/ also be a quadratic nonresidue.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5535,"byte_end":5570,"line_start":195,"line_end":195,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5575,"byte_end":5578,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ It can be calculated using [SageMath] as `GF(modulus).primitive_element()`.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5583,"byte_end":5662,"line_start":197,"line_end":197,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5667,"byte_end":5670,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Implementations of this method MUST ensure that this is the generator used to","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5675,"byte_end":5756,"line_start":199,"line_end":199,"column_start":5,"column_end":86}},{"value":"/ derive `Self::root_of_unity`.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5761,"byte_end":5794,"line_start":200,"line_end":200,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5799,"byte_end":5802,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ [SageMath]: https://www.sagemath.org/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5807,"byte_end":5848,"line_start":202,"line_end":202,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6110,"byte_end":6111,"line_start":209,"line_end":209,"column_start":11,"column_end":12},"name":"S","qualname":"::PrimeField::S","value":"u32","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","sig":null,"attributes":[{"value":"/ An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5897,"byte_end":5977,"line_start":205,"line_end":205,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5982,"byte_end":5985,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ This is the number of leading zero bits in the little-endian bit representation of","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":5990,"byte_end":6076,"line_start":207,"line_end":207,"column_start":5,"column_end":91}},{"value":"/ `modulus - 1`.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6081,"byte_end":6099,"line_start":208,"line_end":208,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6309,"byte_end":6322,"line_start":215,"line_end":215,"column_start":8,"column_end":21},"name":"root_of_unity","qualname":"::PrimeField::root_of_unity","value":"pub fn root_of_unity() -> Self","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" Returns the `2^s` root of unity.","sig":null,"attributes":[{"value":"/ Returns the `2^s` root of unity.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6123,"byte_end":6159,"line_start":211,"line_end":211,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6164,"byte_end":6167,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ It can be calculated by exponentiating `Self::multiplicative_generator` by `t`,","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6172,"byte_end":6255,"line_start":213,"line_end":213,"column_start":5,"column_end":88}},{"value":"/ where `t = (modulus - 1) >> Self::S`.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6260,"byte_end":6301,"line_start":214,"line_end":214,"column_start":5,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7098,"byte_end":7101,"line_start":238,"line_end":238,"column_start":12,"column_end":15},"name":"sbb","qualname":"::arith_impl::sbb","value":"pub fn sbb(u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a - b - borrow, returning the result and modifying\n the borrow value.\n","sig":null,"attributes":[{"value":"/ Calculate a - b - borrow, returning the result and modifying","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":6974,"byte_end":7038,"line_start":235,"line_end":235,"column_start":5,"column_end":69}},{"value":"/ the borrow value.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7043,"byte_end":7064,"line_start":236,"line_end":236,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7069,"byte_end":7086,"line_start":237,"line_end":237,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7437,"byte_end":7440,"line_start":249,"line_end":249,"column_start":12,"column_end":15},"name":"adc","qualname":"::arith_impl::adc","value":"pub fn adc(u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a + b + carry, returning the sum and modifying the\n carry value.\n","sig":null,"attributes":[{"value":"/ Calculate a + b + carry, returning the sum and modifying the","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7318,"byte_end":7382,"line_start":246,"line_end":246,"column_start":5,"column_end":69}},{"value":"/ carry value.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7387,"byte_end":7403,"line_start":247,"line_end":247,"column_start":5,"column_end":21}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7408,"byte_end":7425,"line_start":248,"line_end":248,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7785,"byte_end":7799,"line_start":260,"line_end":260,"column_start":12,"column_end":26},"name":"mac_with_carry","qualname":"::arith_impl::mac_with_carry","value":"pub fn mac_with_carry(u64, u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a + (b * c) + carry, returning the least significant digit\n and setting carry to the most significant digit.\n","sig":null,"attributes":[{"value":"/ Calculate a + (b * c) + carry, returning the least significant digit","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7622,"byte_end":7694,"line_start":257,"line_end":257,"column_start":5,"column_end":77}},{"value":"/ and setting carry to the most significant digit.","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7699,"byte_end":7751,"line_start":258,"line_end":258,"column_start":5,"column_end":57}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":7756,"byte_end":7773,"line_start":259,"line_end":259,"column_start":5,"column_end":22}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":9854,"byte_end":9867,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\batch.rs","byte_start":9854,"byte_end":9867,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":980,"byte_end":985,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":992,"byte_end":994,"line_start":38,"line_end":38,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2672},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1001,"byte_end":1005,"line_start":39,"line_end":39,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3026},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1012,"byte_end":1017,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2637},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1024,"byte_end":1031,"line_start":41,"line_end":41,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1038,"byte_end":1042,"line_start":42,"line_end":42,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3016},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1049,"byte_end":1053,"line_start":43,"line_end":43,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3028},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1065,"byte_end":1070,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":9401},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1091,"byte_end":1114,"line_start":46,"line_end":46,"column_start":7,"column_end":30},"kind":"SuperTrait","from":{"krate":4,"index":66},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1121,"byte_end":1124,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3083},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1146,"byte_end":1149,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3088},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1171,"byte_end":1174,"line_start":49,"line_end":49,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3093},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1196,"byte_end":1199,"line_start":50,"line_end":50,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3110},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1229,"byte_end":1232,"line_start":51,"line_end":51,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3083},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1272,"byte_end":1275,"line_start":52,"line_end":52,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3093},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1315,"byte_end":1318,"line_start":53,"line_end":53,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3088},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1350,"byte_end":1359,"line_start":54,"line_end":54,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3122},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1366,"byte_end":1375,"line_start":55,"line_end":55,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3114},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1382,"byte_end":1391,"line_start":56,"line_end":56,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3118},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1406,"byte_end":1415,"line_start":57,"line_end":57,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3122},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1440,"byte_end":1449,"line_start":58,"line_end":58,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3114},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":1474,"byte_end":1483,"line_start":59,"line_end":59,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3118},"to":{"krate":0,"index":56}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3122,"byte_end":3127,"line_start":117,"line_end":117,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":56},"to":{"krate":0,"index":75}},{"span":{"file_name":"C:\\Users\\dragon\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ff-0.10.1\\src\\lib.rs","byte_start":3130,"byte_end":3134,"line_start":117,"line_end":117,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2922},"to":{"krate":0,"index":75}}]}